Scalability and High Availability

- Scalability means that an application / system can handle greater loads by adpating.
- Two kinds of Scalability:
    - Vertical Scalability
        - Means increasing size of instance
        - Ex: Application runs on a t2.micro. Scaling that application vertically means running it on t2.large.
        - Vertical Scalability is very common for non distributed systems, such as a database.
        - RDS, ElastiCache are services that can scale vertically.
        - Usually a limit to how much you can vertically scale (hardware limit)
    - Horizontal Scalability (= elasticity)
        - Means increasing the number of instances/systems for your application.
        - Implies distributed system
        - Easy to Horizontally scale thanks to the cloud offerings such as Amazon EC2
- Scalability is linked but different to High Availability

High Availability

- High Availability Usually goes hand in hand with Horizontal scaling
- Means running your application / system in at least 2 data centers (== Availability Zones)
- The goal of High Availability is to survive a data center loss

- High Availability can be passive (for RDS Multi AZ for example)
- High Availability can be active (For Horizontal scaling)

Summary:
    - Vertical Scaling: Increase Instance size (= scale up / down)
        - from: t2.nano - 0.5G of RAM, 1 vCPU
        - To: u-12tb1.metal - 12.3 TB of RAM, 448 vCPUs

    - Horizontal Scaling: Increase number of instances (=scale out/in)
        - Auto Scaling Group
        - Load Balancing
    - High Availability: Run instances for the same application accross multi AZ
        - Auto Scaling Group multi AZ
        - Load Balancer multi AZ

--------------------------------------------------------------------------------------------------------------------------------

Load Balancing

- Load Balances are servers that forward traffic to multiple servers (eg., EC2 instances) downstream
- Why use a load balancer:
    - Spread load across multipel downstream instances
    - Expose a single point of access (DNS) to application
    - Seamlessly handle failures of downstream instances
    - Do regular health checks to instance
    - Provide SSL termination (HTTPS) for websites
    - Enforce stickiness with cookies
    - High Availability across zones
    - Spearate public traffic from private traffic


Elastic Load Balancer
- It is a managed load balancer
    - AWS guarantees that it will be working
    - AWS takes care of upgrades, maintenance, high Availability
    - AWS provides only a few configuration knobs

It costs less to setup your own load balancer and it will be a lot more effort on our end

- It is integrated with many AWS offerings/services
    - EC2, EC2 Auto Scaling groups, Amazon ECS
    - AWS Certificate Manager (ACM), CloudWatch
    - Route 53, AWS WAF, AWS Global Accelerator

Health checks:
    - Check if the instance is working properly
    - Health checks are crucial for Load Balancers
    - Enable the load balancer to know if instances it forwards traffic to, are available to reply to requests
    - Health check is done on a port and a route (/health is common)
    - If the response is not 200 (OK), then the instance is unhealthy

Types of Load Balancer on AWS

- 4 kinds of managed load balancers
    - Classic load balancer (v1 - old generation) - 2009 - CLB
        - HTTP, HTTPS, TCP, SSL (secure TCP)
    - Application Load balancer (v2 - new generation) - 2016 - ALB
        - HTTP, HTTPS, WebSocket
    - Network Load Balancer (v2 - new generation) - 2017 - NLB
        - TCP, TLS (secure TCP), UDP
    - Gateway Load Balancer - 2020 - GWLB
        - Operates at layer 3 (Network Layer) - IP Protocol

- Overall, it is recommended to use the newer generation load balancers as they provide more features
- Some load balancers can be setup as internal (private) or external (public) ELBs

------------------------------------------------------------------------------------------------------------------------


